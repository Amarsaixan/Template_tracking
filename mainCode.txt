#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <iostream>
#include <stdio.h>
/*
created by Amarsaikhan On April 4, 2018
Opencv 3.4.1
*/
using namespace std;
using namespace cv;
Mat img; Mat templ; Mat result; Mat temp;
char* image_window = "Source Image";
char* result_window = "Result window";

int match_method = CV_TM_SQDIFF;
int max_Trackbar = 5;
using namespace cv;

int main(int, char**)
{

	VideoCapture cap(0);
	if (!cap.isOpened()) {
		cout << "\n camera neej chadsanguiee";
		return -1;
	}
	templ = imread("temp.jpg", CV_LOAD_IMAGE_GRAYSCALE);
	cout << "rows: " << templ.rows << " cols: " << templ.cols;

	imshow("template image", templ);


	int result_cols, result_rows;
	for (;;)
	{
		Mat frame;
		cap >> temp;
		cvtColor(temp, frame, CV_BGR2GRAY);
		img = frame;


		/// Source image delgetsend
		Mat img_display;
		img.copyTo(img_display);

		/// Create the result matrits
		result_cols = img.cols - templ.cols + 1;
		result_rows = img.rows - templ.rows + 1;

		result.create(result_rows, result_cols, CV_32FC1);

		///Matching and Normalize tootsoh
		matchTemplate(img, templ, result, match_method);
		normalize(result, result, 0, 1, NORM_MINMAX, -1, Mat());

		/// Localizing the best match with minMaxLoc oloh, tootsooloh
		double minVal; double maxVal; Point minLoc; Point maxLoc;
		Point matchLoc;

		minMaxLoc(result, &minVal, &maxVal, &minLoc, &maxLoc, Mat());
		///arguudaas songoh 
		/// For SQDIFF and SQDIFF_NORMED, the best matches are lower values. For all the other methods, the higher the better
		if (match_method == CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED)
		{
			matchLoc = minLoc;
		}
		else
		{
			matchLoc = maxLoc;
		}
		cout << "\n MinLoc: " << minLoc;

		cout << "\n MaxLoc: " << maxLoc;
		/// Show me what you got

		rectangle(temp, matchLoc, Point(matchLoc.x + templ.cols, matchLoc.y + templ.rows), Scalar(255, 0, 0), 1, 8, 0);



		rectangle(result, matchLoc, Point(matchLoc.x + templ.cols, matchLoc.y + templ.rows), Scalar(255, 0, 0), 1, 8, 0);

		imshow(image_window, temp);
		imshow(result_window, result);



		if (waitKey(30) >= 0) break;
	}
	return 0;
}